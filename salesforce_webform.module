<?php


/**
 * Implements hook_menu
 */
function salesforce_webform_menu()
{
	$items['node/%/submission/%/resendsalesforce'] = array(
		'title' => 'Resend to Salesforce',
		'description' => 'Resend Webform Submission to Salesforce',
		'page callback' => 'salesforce_webform_resend_salesforce',
		'page arguments' => array(1, 3),
		'access arguments' => array('access administration pages'),
		'type' => MENU_CALLBACK
	);
	
	return $items;
} // end function salesforce_webform_menu


/**
 * Implementation of hook_node_load
 * 
 * This function is called every time a node is loaded from the database.
 * 
 * Essentially looking to ensure we are looking at a specific node, if true
 * then checking to see if the node is of type webform or not. If true, then
 * check to see if license key generation is suppose to occur, if true, then
 * set generate_license on $node object to true.
 */
function salesforce_webform_node_load($nodes, $types)
{
	// We only care if we are laoding a single node.
	if (count($nodes) > 1)
	{
		return;
	}

	$node = $nodes[key($nodes)];

	// We only care if we are dealing with a webform node
	if ($node->type == 'webform')
	{
		$result = db_select('salesforce_webforms', 'sw')
					->fields('sw')
					->condition('nid', $node->nid)
					->execute()
					->fetchObject();

		if (!empty($result))
		{
			$node->use_salesforce    = $result->enabled;
			$node->salesforce_object = $result->object;
		}
		else
		{
			$node->use_salesforce = 0;
		}		
	}

} // end function salesforce_webform_node_load


/**
 * Implementation of hook_licensing_node_insert
 * 
 * When a node is updated this gets called and in turn calls the private
 * function _salesforce_webform_node_insert_update for action.
 */
function salesforce_webform_node_insert($node)
{
	_salesforce_webform_node_insert_update($node);
} // end function salesforce_webform_node_insert


/**
 * Implementation of hook_licensing_node_update
 * 
 * When a node is updated this gets called and in turn calls the private
 * function _salesforce_webform_node_insert_update for action.
 */
function salesforce_webform_node_update($node)
{
	_salesforce_webform_node_insert_update($node);
} // end function salesforce_webform_node_update


/**
 * Private Function (only to be used from within this module)
 * 
 * This function is called by either the hook_node_update or hook_node_insert callbacks,
 * its purpose is to validate if license key generation is suppose to happen and if so then
 * set the generate_license value on the $node object true.
 */
function _salesforce_webform_node_insert_update($node)
{
	if ($node->type != 'webform' && !isset($node->salesforce_webform_settings['use_salesforce']))
		return;

	$result = db_select('salesforce_webforms', 'sw')
				->fields('sw')
				->condition('nid', $node->nid)
				->execute()
				->fetchObject();

	if (empty($result))
	{
		db_insert('salesforce_webforms')
			->fields(array(
				'nid' => $node->nid,
				'enabled' => ($node->salesforce_webform_settings['use_salesforce'] == 1) ? 1 : 0,
				'object' => $node->salesforce_webform_settings['salesforce_object']
			))
			->execute();
	}
	else
	{

		db_update('salesforce_webforms')
			->fields(array(
				'enabled' => ($node->salesforce_webform_settings['use_salesforce'] == 1) ? 1 : 0,
				'object' => $node->salesforce_webform_settings['salesforce_object']
			))
			->condition('nid', $node->nid)
			->execute();
	}

} // end function _salesforce_webform_node_insert_update


/**
 * Implementation of hook_form_alter
 * 
 * Alter the webform_node_form with Salesforce settings in the additional
 * settings section. Allows the ability to send to Salesforce and to define
 * which Salesforce object the webform submissions will be mapped to.
 */
function salesforce_webform_form_alter(&$form, &$form_state, $form_id)
{
	if ( $form_id == 'webform_node_form' )
	{		
		$types = array();
		foreach (salesforce_api_describeGlobal()->types as $type)
		{
			$types[$type->name] = $type->label;
		}

		/* Start SalesForce Settings Form */
		$form['salesforce_webform_settings'] = array(
			'#type' => 'fieldset',
			'#title' => t('SalesForce Settings'),
			'#collapsible' => TRUE,
		    '#collapsed' => FALSE,
			'#tree' => TRUE,
			'#group' => 'additional_settings',
			'#attributes' => array(
		      'class' => array('salesforce-webform-settings-form'),
		    ),
		    '#attached' => array(
		      'js' => array(drupal_get_path('module', 'salesforce_webform') . '/salesforce_webform.js'),
		    ),
			'#weight' => 10
		);
		$form['salesforce_webform_settings']['use_salesforce'] = array (
			'#type' => 'checkbox',
			'#title' => t('Submit to SalesForce'),
			'#default_value' => (isset($form['#node']->use_salesforce) && $form['#node']->use_salesforce == 1) ? 1 : 0,
			'#description' => t('If yes, the form will be sent via SOAP to SalesForce.  Make sure you have specified the username & password in Administer->Site Configuration->SalesForce Webform first.')
		);
		$form['salesforce_webform_settings']['salesforce_object'] = array(
			'#type' => 'select',
			'#title' => t('Object Type'),
			'#options' => $types,
			'#description' => t('Select which object type to submit to.'),
			'#default_value' => (isset($form['#node']->salesforce_object)) ? $form['#node']->salesforce_object : ''
		);
	}
} // end function salesforce_webform_form_alter


/**
 * Implementation of MODULE_form_FORM_ID_alter
 * 
 * If Salesforce was enabled for the module, then add the Saleforces form elements
 * to the component edit form so that mapping to the salesforce object field can be done.
 */
function salesforce_webform_form_webform_component_edit_form_alter(&$form, &$form_state)
{
	$node = node_load($form['nid']['#value']);

	if ($node->use_salesforce == 1)
	{
		$form['salesforce_webform'] = array(
			'#type' => 'fieldset',
			'#title' => 'Salesforce',
			'#collapsible' => true,
			'#collapsed' => false
		);

		$options = array();
		$options['none'] = '--None--';
		foreach (salesforce_api_describeSObject('Lead')->fields as $field)
		{
			$options[$field->name] = $field->label;
		}

		$result = db_select('salesforce_webform_fieldmaps', 'swf')
					->fields('swf', array('sffname'))
					->condition('nid', $form['nid']['#value'])
					->condition('cid', $form['cid']['#value'])
					->execute()
					->fetchObject();

		$form['salesforce_webform']['object'] = array(
			'#type' => 'select',
			'#title' => 'Salesforce Object Field',
			'#options' => $options,
			'#default_value' => isset($result->sffname) ? $result->sffname : ''
		);
	}
} // end function salesforce_webform_form_webform_component_edit_form_alter


/**
 * Implementation of hook_webform_component_insert
 * 
 * Upon component insert (save) for the webform create the necessary field
 * mapping entry for webform component to Salesforce object field
 */
function salesforce_webform_webform_component_insert($component)
{
	if (!isset($component['salesforce_webform']))
		return;

	db_insert('salesforce_webform_fieldmaps')
		->fields(array(
			'nid' => $component['nid'],
			'cid' => $component['cid'],
			'sffname' => $component['salesforce_webform']['object']
		))
		->execute();
} // end function salesforce_webform_webform_component_insert


/**
 * Implementation hook_webform_component_update
 * 
 * Upon component update either insert/update field mapping entry for
 * webform component to Salesforce object field
 */
function salesforce_webform_webform_component_update($component)
{
	if (!isset($component['salesforce_webform']))
		return;

	if ($component['salesforce_webform']['object'] == 'none')
	{
		db_delete('salesforce_webform_fieldmaps')
			->condition('nid', $component['nid'])
			->condition('cid', $component['cid'])
			->execute();
	}
	else
	{
		$result = db_select('salesforce_webform_fieldmaps', 'swf')
					->fields('swf', array('sffname'))
					->condition('nid', $component['nid'])
					->condition('cid', $component['cid'])
					->execute()
					->fetchObject();

		if ($result)
		{
			db_update('salesforce_webform_fieldmaps')
				->fields(array(
					'sffname' => $component['salesforce_webform']['object']
				))
				->condition('nid', $component['nid'])
				->condition('cid', $component['cid'])
				->execute();
		}
		else
		{
			db_insert('salesforce_webform_fieldmaps')
				->fields(array(
					'nid' => $component['nid'],
					'cid' => $component['cid'],
					'sffname' => $component['salesforce_webform']['object']
				))
				->execute();
		}
		
	}

} // end function salesforce_webform_webform_component_update


/**
 * Implementation of hook_webform_component_delete
 * 
 * Delete any fieldmaps of the component to the salesforce object field
 */
function salesforce_webform_webform_component_delete($component)
{
	if (!isset($component['salesforce_webform']))
		return;

	db_delete('salesforce_webform_fieldmaps')
		->condition('nid', $component['nid'])
		->condition('cid', $component['cid'])
		->execute();
} // end function salesforce_webform_webform_component_delete


/**
 * Implementation of hook_webform_submission_insert
 * 
 * Upsert data into Salesforce via the Salesforce API
 */
function salesforce_webform_webform_submission_insert($node, $submission)
{
	if (!isset($node->use_salesforce) || (isset($node->use_salesforce) && $node->use_salesforce == 0))
		return;

	$components = $node->webform['components'];

	$records = array();
	$record = array();
	foreach ($components as $key => $component)
	{
		$result = db_select('salesforce_webform_fieldmaps', 'swf')
					->fields('swf', array('sffname'))
					->condition('nid', $component['nid'])
					->condition('cid', $component['cid'])
					->execute()
					->fetchObject();

		if (!empty($result))
			$record[$result->sffname] = $submission->data[$component['cid']]['value'][0];
	}
	$records[] = $record;

	// Upsert it into SalesForce
	$result = salesforce_api_upsert($records, $node->salesforce_object);

	if (isset($result['successes'][0]))
	{
		if (isset($result['created'][0]))
		{
			$sfid = $result['created'][0];
		}
		else if (isset($result['updated'][0]))
		{
			$sfid = $result['updated'][0];
		}

		db_insert('salesforce_webform_submissions')
			->fields(array(
				'sid' => $submission->sid,
				'sfid' => $sfid,
				'status' => 1
			))
			->execute();
	}
	else
	{
		db_insert('salesforce_webform_submissions')
			->fields(array(
				'sid' => $submission->sid,
				'status' => 2
			))
			->execute();
		
		watchdog('salesforce_webform', 'Salesforce Upsert failed');
	}
} // end function salesforce_webform_submission_insert


function salesforce_webform_resend_salesforce($nid, $sid)
{
	module_load_include('inc', 'webform', 'includes/webform.submissions');

	$node = node_load($nid);
	$submission = webform_get_submission($nid, $sid);

	$components = db_select('webform_component', 'wc')
					->fields('wc')
					->condition('nid', $nid)
					->execute()
					->fetchAll();

	$records = array();
	$record = array();
	foreach ($components as $key => $component)
	{
		$result = db_select('salesforce_webform_fieldmaps', 'swf')
					->fields('swf', array('sffname'))
					->condition('nid', $component->nid)
					->condition('cid', $component->cid)
					->execute()
					->fetchObject();

		if (!empty($result))
			$record[$result->sffname] = $submission->data[$component->cid]['value'][0];
	}
	$records[] = $record;

	// Upsert it into SalesForce
	$result = salesforce_api_upsert($records, $type = $node->salesforce_object);

	if (isset($result['successes'][0]))
	{
		if (isset($result['created'][0]))
		{
			$sfid = $result['created'][0];
		}
		else if (isset($result['updated'][0]))
		{
			$sfid = $result['updated'][0];
		}

		db_update('salesforce_webform_submissions')
			->fields(array(
				'sfid' => $sfid,
				'status' => 1
			))
			->condition('sid', $submission->sid)
			->execute();
			
		drupal_set_message('Resend to Salesforce Succeeded');
	}
	else
	{
		db_update('salesforce_webform_submissions')
			->fields(array(
				'status' => 2
			))
			->condition('sid', $submission->sid)
			->execute();
			
		drupal_set_message('Resend to Salesforce Failed', 'error');
	}

	if (isset($_REQUEST['destination']))
	{
		drupal_goto($_REQUEST['destination']);
	}
	else
	{
		drupal_goto("node/{$nid}/submission/{$sid}");
	}

} // end function salesforce_webform_resend_salesforce


